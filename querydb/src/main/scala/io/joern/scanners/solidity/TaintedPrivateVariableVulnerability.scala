package io.joern.scanners.solidity
import io.joern.scanners._
import io.shiftleft.semanticcpg.language._
import io.joern.console._
import io.joern.macros.QueryMacros._
import io.joern.dataflowengineoss.language._
import io.joern.dataflowengineoss.queryengine.EngineContext
import io.shiftleft.codepropertygraph.generated.{ModifierTypes, Operators}
import io.shiftleft.codepropertygraph.generated.nodes.AstNode
object TaintedPrivateVariableVulnerability extends QueryBundle {
  implicit val resolver: ICallResolver = NoResolve

  @q
  def isTaintedPrivateVariable()(implicit context: EngineContext): Query =
    Query.make(
      name = "tainted-private-variable-contract",
      author = Crew.tam,
      title = "isTaintedPrivateVariable method is able to check if private variables are modified by public variables",
      description = """
          |An attacker can call a method that can change a private variable and this can be dangerous
          |when left unchecked
          |""".stripMargin,
      score = 5,
      withStrRep({ cpg =>
        def sink = cpg.method
          .where(_.hasModifier(ModifierTypes.PUBLIC))
          .call
          .name(s"${Operators.assignment}.*")
          .where(_.argument.isCall.nameExact(Operators.fieldAccess).where(_.argument.isFieldIdentifier))
        def source = cpg.method.parameter
        sink.reachableBy(source).l
      }),
      tags = List(QueryTags.taintedPrivateVariable, QueryTags.default),
      codeExamples = CodeExamples(
        List("""
          |
          |pragma solidity ^0.8.0;
          |
          |contract Foo {
          |
          |  uint private a ;
          |
          |  function editVariable(uint _a) public {
          |      a = _a;
          |  }
          |
          |}""".stripMargin),
        List("""
          |
          |pragma solidity ^0.8.0;
          |
          |contract Foo {
          |
          |  uint private a ;
          |
          |  function editVariable(uint _a) public {
          |      a = _a;
          |  }
          |
          |}""".stripMargin)
      )
    )
}
