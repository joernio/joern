package io.joern.scanners.solidity
import io.joern.scanners._
import io.shiftleft.semanticcpg.language._
import io.joern.console._
import io.joern.macros.QueryMacros._
import io.joern.dataflowengineoss.language._
import io.joern.dataflowengineoss.queryengine.EngineContext
import io.shiftleft.codepropertygraph.generated.Operators
import io.shiftleft.codepropertygraph.generated.nodes.AstNode
object OverflowVulnerability extends QueryBundle {
  implicit val resolver: ICallResolver = NoResolve

  @q
  def isOverflowVulnerability: Query =
    Query.make(
      name = "overflow-contract",
      author = Crew.tam,
      title = "isOverflowVulnerability method is able to check overflow of integers.",
      description = """
          |An attacker can call a method that increments a global integer,
          |this integer can possibly overflow if it is larger than the given type
          |and thus should be checked
          |""".stripMargin,
      score = 5,
      withStrRep({ cpg =>
        def overflowableArguments = cpg.call
          .nameExact(Operators.addition, Operators.assignmentPlus)
          .where(_.argument(1).typ.fullNameExact("int", "long"))
          .filterNot(_.argument.isLiteral.size == 2)
          .argument

        val argSet: Set[AstNode] = overflowableArguments.collect { case x: AstNode => x }.toSet

        overflowableArguments
          .whereNot(
            _.dominatedBy
              .containsCallTo(".*require.*")
              .filter(_.ast.exists(argSet.contains))
          )
          .astParent
          .isExpression
          .dedup

      }),
      tags = List(QueryTags.overflow, QueryTags.default),
      codeExamples = CodeExamples(
        List("""
          |pragma solidity ^0.8.0;
          |
          |contract overflow {
          |    int sellerBalance;
          |    constructor(){
          |     sellerBalance = 0;
          |    }
          |    function add(int value) public  {
          |        sellerBalance += value; // possible overflow
          |    }
          |
          |    function safe_add(int value) public {
          |        require(value + sellerBalance >= sellerBalance, "Overflow");
          |        sellerBalance += value;
          |    }
          |}""".stripMargin),
        List("""
          |pragma solidity ^0.8.0;
          |
          |contract overflow {
          |    int sellerBalance;
          |    constructor(){
          |     sellerBalance = 0;
          |    }
          |    function add(int value) public  {
          |        sellerBalance += value; // possible overflow
          |    }
          |
          |    function safe_add(int value) public {
          |        require(value + sellerBalance >= sellerBalance, "Overflow");
          |        sellerBalance += value;
          |    }
          |}""".stripMargin)
      )
    )
}
