package io.joern.scanners.solidity
import io.joern.scanners._
import io.shiftleft.semanticcpg.language._
import io.joern.console._
import io.joern.macros.QueryMacros._
import io.joern.dataflowengineoss.language._
import io.joern.dataflowengineoss.queryengine.EngineContext
import io.shiftleft.codepropertygraph.generated.nodes.AstNode
object SelfDestructVulnerability extends QueryBundle {
  implicit val resolver: ICallResolver = NoResolve

  @q
  def isSelfDestructVulnerability: Query =
    Query.make(
      name = "self-destruct-contract",
      author = Crew.tam,
      title =
        "isSelfDestruct method is able to be called by any user and allows attackers to destroy a contract without the owners knowledge",
      description = """
          |An attacker can call this method and since there are no checks
          |on the user calling the method, this will allow the contract to
          |be self destructed and other users interacting with the contract will
          |not know the difference.
          |""".stripMargin,
      score = 5,
      withStrRep({ cpg =>
        def selfDestructCalls = cpg.call
          .nameExact("selfdestruct")
          .argument
        val argSet: Set[AstNode] = selfDestructCalls.collect { case x: AstNode => x }.toSet
        selfDestructCalls
          .whereNot(
            _.dominatedBy
              .containsCallTo(".*require.*")
              .filter(_.ast.exists(argSet.contains))
          )
          .astParent
          .isExpression
          .dedup
      }),
      tags = List(QueryTags.selfDestruct, QueryTags.default),
      codeExamples = CodeExamples(
        List("""
          |pragma solidity ^0.8.0;
          |
          |contract Foo {
          |    address payable owner;
          |    uint256 public sum;
          |    function selfDestructSafe() public  {
          |        require (msg.sender == owner , "not owner");
          |        selfdestruct(owner);
          |    }
          |    function selfDestructUnsafe() public  {
          |        selfdestruct(owner);
          |    }
          |
          |    function change(uint256 a) public {
          |        sum = a;
          |    }
          |}
          |""".stripMargin),
        List("""
          |pragma solidity ^0.8.0;
          |
          |contract Foo {
          |    address payable owner;
          |    uint256 public sum;
          |    function selfDestructSafe() public  {
          |        require (msg.sender == owner , "not owner");
          |        selfdestruct(owner);
          |    }
          |    function selfDestructUnsafe() public  {
          |        selfdestruct(owner);
          |    }
          |
          |    function change(uint256 a) public {
          |        sum = a;
          |    }
          |}
          |""".stripMargin)
      )
    )
}
