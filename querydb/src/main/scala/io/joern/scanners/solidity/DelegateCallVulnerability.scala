package io.joern.scanners.solidity
import io.joern.scanners._
import io.shiftleft.semanticcpg.language._
import io.joern.console._
import io.joern.macros.QueryMacros._
import io.joern.dataflowengineoss.language._
import io.joern.dataflowengineoss.queryengine.EngineContext
import io.shiftleft.codepropertygraph.generated.{ModifierTypes, Operators}
import io.shiftleft.codepropertygraph.generated.nodes.AstNode
object DelegateCallVulnerability extends QueryBundle {
  implicit val resolver: ICallResolver = NoResolve

  @q
  def isDelegateCallVulnerability: Query =
    Query.make(
      name = "delegate-call-contract",
      author = Crew.tam,
      title =
        "isDelegateCallVulnerability method is able to check that `.delegatecall` should not be called publically",
      description = """
          |An attacker can call a method that contains a delegatecall, and if the attacker controls the address
          |and the data that is sent to this call, this means that the call can be sent to a malicious contract that
          |can drain the currency within the contract.
          |""".stripMargin,
      score = 5,
      withStrRep({ cpg =>
        {
          def arg = cpg.method
            .where(_.code("function.*"))
            .call
            .code(".*delegatecall.(.*?)")
            .isCall
            .argument
            .code
            .l
            .head

          def sender = cpg.method
            .where(_.code("function.*"))
            .call
            .code(".*delegatecall")
            .argument
            .isIdentifier
            .name
            .l
            .head

          def delegate = cpg.method
            .where(_.code("function.*"))
            .where(_.call.code(".*delegatecall.(.*?)"))
            .where(_.parameter.name(arg))
            .where(_.parameter.name(sender))
            .method
          delegate
        }
      }),
      tags = List(QueryTags.delegateCall, QueryTags.default),
      codeExamples = CodeExamples(
        List("""
          |pragma solidity ^0.8.0;
          |contract Delegatecall{
          |    function delegate(address to, bytes data){
          |        to.delegatecall(data);
          |    }
          |}""".stripMargin),
        List("""
          |pragma solidity ^0.8.0;
          |contract Delegatecall{
          |    function delegate(address to, bytes data){
          |        to.delegatecall(data);
          |    }
          |}""".stripMargin)
      )
    )
}
