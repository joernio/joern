package io.joern.scanners.solidity
import io.joern.scanners._
import io.shiftleft.semanticcpg.language._
import io.joern.console._
import io.joern.macros.QueryMacros._
import io.joern.dataflowengineoss.language._
import io.joern.dataflowengineoss.queryengine.EngineContext
import io.shiftleft.codepropertygraph.generated.{ModifierTypes, Operators}
import io.shiftleft.codepropertygraph.generated.nodes.AstNode
object AbiEncoderVulnerability extends QueryBundle {
  implicit val resolver: ICallResolver = NoResolve

  @q
  def isAbiEncoderVulnerability(): Query =
    Query.make(
      name = "abi-encoder-contract",
      author = Crew.tam,
      title =
        "isAbiEncoderVulnerability method is able to check that in certain solidity versions that abi encode is not working as intended",
      description = """
          |A creator of a contract can use a function called abi.encode, this would allow the encoding of values into bytes,
          |however, in Solidity versions 0.4.7 - 0.5.9, this encoding had a bug and is incorrect.
          |""".stripMargin,
      score = 2,
      withStrRep({ cpg =>
        def findAbiEncoder = cpg.call
          .where(_.methodFullName(Operators.assignment))
          .where(_.argument.isCall.name("encode"))

        findAbiEncoder
      }),
      tags = List(QueryTags.abiEncoder, QueryTags.default),
      codeExamples = CodeExamples(
        List("""
          pragma solidity 0.4.7;
          |contract A {
          |    uint[2][3] bad_arr = [[1, 2], [3, 4], [5, 6]];
          |
          |    /* Array of arrays passed to abi.encode is vulnerable */
          |    function bad() public {
          |        bytes memory b = abi.encode(bad_arr);
          |    }
          |}""".stripMargin),
        List("""
          pragma solidity 0.4.7;
          |contract A {
          |    uint[2][3] bad_arr = [[1, 2], [3, 4], [5, 6]];
          |
          |    /* Array of arrays passed to abi.encode is vulnerable */
          |    function bad() public {
          |        bytes memory b = abi.encode(bad_arr);
          |    }
          |}""".stripMargin)
      )
    )
}
