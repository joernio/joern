package io.joern.scanners.solidity
import io.joern.scanners._
import io.shiftleft.semanticcpg.language._
import io.joern.console._
import io.joern.macros.QueryMacros._
import io.joern.dataflowengineoss.language._
import io.joern.dataflowengineoss.queryengine.EngineContext
import io.shiftleft.codepropertygraph.generated.{ModifierTypes, Operators}
import io.shiftleft.codepropertygraph.generated.nodes.AstNode
object IncorrectShiftVulnerability extends QueryBundle {
  implicit val resolver: ICallResolver = NoResolve

  @q
  def isIncorrectShiftVulnerability: Query =
    Query.make(
      name = "incorrect-shift-contract",
      author = Crew.tam,
      title =
        "isIncorrectShiftVulnerability method is able to check that in an assembly block, that the shifting is correct",
      description = """
          |A creator of a contract can use assembly blocks, this means that bit shifting is allowed in solidity,
          |this means that incorrect shifting is possible and this checks that the shifting is not incorrect.
          |""".stripMargin,
      score = 4,
      withStrRep({ cpg =>
        {
          def sink = cpg.method
            .code("function .*")
            .call
            .code(".* := shr.*")
            .argument
            .isIdentifier
            .name
            .head

          def source = cpg.method
            .code("function .*")
            .call
            .code(".* := shr.*")
            .argument
            .isCall
            .name(s"${Operators.arithmeticShiftRight}")
            .argument
            .where(_.isCall.name(sink))
          source
        }
      }),
      tags = List(QueryTags.incorrectShift, QueryTags.default),
      codeExamples = CodeExamples(
        List("""
          |pragma solidity ^0.8.0;
          |contract C {
          |    function f() internal returns (uint a) {
          |        assembly {
          |            a := shr(a, 8)
          |        }
          |    }
          |}
          |""".stripMargin),
        List("""
          |pragma solidity ^0.8.0;
          |contract C {
          |    function f() internal returns (uint a) {
          |        assembly {
          |            a := shr(a, 8)
          |        }
          |    }
          |}
          |""".stripMargin)
      )
    )
}
