package io.joern.javasrc2cpg.vulnerability
import io.joern.javasrc2cpg.testfixtures.JavaSrcCodeToCpgFixture
import io.shiftleft.codepropertygraph.generated.Operators
import io.shiftleft.codepropertygraph.generated.nodes.Identifier
import io.shiftleft.semanticcpg.language.{ICallResolver, NoResolve, toNodeTypeStarters}
import io.shiftleft.semanticcpg.language._
import org.scalatest.Ignore
class Reentrancy extends JavaSrcCodeToCpgFixture {
  implicit val resolver: ICallResolver = NoResolve

  override val code: String =
    """
      |public class Foo {
      |
      |  address winner = new address();
      |  boolean prizePaidOut;
      |  boolean gameHasEnded;
      |
      |  int send_payment() {
      |    if (gameHasEnded && !(prizePaidOut)) {
      |      winner.send(1000); // send a prize to the winner
      |      prizePaidOut = true;
      |    }
      |  }
      |
      |  int safe_send_payment() {
      |    if (gameHasEnded && !(prizePaidOut)) {
      |      if (winner.send(1000))
      |        prizePaidOut = true;
      |      else throw new Exception();
      |    }
      |  }
      |
      |}
      |
      |class address {
      |  public void send(int i) {
      |    return;
      |  }
      |}""".stripMargin
  "Reentrancy" in {

    {
      println(cpg.typeDecl.dotAst.head)
//            println(cpg.call.name.l)
//      println(cpg.call.name(".*send.*").where(_.receiver.dominates.code.l))
//      cpg.call.name(".*send.*").foreach(x => x.receiver.dominates.foreach(x => println(x.code)))
      cpg.call
        .name(".*send.*")
        .where(_.receiver.dominates.containsCallTo(".*throw.*"))
    }.l.foreach(x => println(x.traversal.method.next().name))
  }
//  (null,METHOD,int send_payment())
//  (0,METHOD_PARAMETER_IN,this)
//  (1,BLOCK,null)
//  (1,CONTROL_STRUCTURE,if (gameHasEnded && !(prizePaidOut)))
//  (1,CALL,gameHasEnded && !(prizePaidOut))
//  (1,CALL,gameHasEnded)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,gameHasEnded)
//  (2,CALL,!(prizePaidOut))
//  (1,CALL,prizePaidOut)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,prizePaidOut)
//  (2,BLOCK,null)
//  (1,CALL,winner.send(1000))
//  (0,CALL,winner)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,winner)
//  (1,LITERAL,1000)
//  (2,CALL,prizePaidOut = true)
//  (1,CALL,prizePaidOut)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,prizePaidOut)
//  (2,LITERAL,true)
//  (null,MODIFIER,VIRTUAL)
//  (null,METHOD_RETURN,int)
//  (null,METHOD,int safe_send_payment())
//  (0,METHOD_PARAMETER_IN,this)
//  (1,BLOCK,null)
//  (1,CONTROL_STRUCTURE,if (gameHasEnded && !(prizePaidOut)))
//  (1,CALL,gameHasEnded && !(prizePaidOut))
//  (1,CALL,gameHasEnded)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,gameHasEnded)
//  (2,CALL,!(prizePaidOut))
//  (1,CALL,prizePaidOut)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,prizePaidOut)
//  (2,BLOCK,null)
//  (1,CONTROL_STRUCTURE,if (winner.send(1000)))
//  (1,CALL,winner.send(1000))
//  (0,CALL,winner)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,winner)
//  (1,LITERAL,1000)
//  (2,CALL,prizePaidOut = true)
//  (1,CALL,prizePaidOut)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,prizePaidOut)
//  (2,LITERAL,true)
//  (3,CONTROL_STRUCTURE,else)
//  (1,CALL,throw new Exception();)
//  (1,BLOCK,null)
//  (1,CALL,null)
//  (1,IDENTIFIER,$obj0)
//  (2,CALL,new Exception())
//  (2,CALL,new Exception())
//  (0,IDENTIFIER,$obj0)
//  (3,IDENTIFIER,$obj0)
//  (null,MODIFIER,VIRTUAL)
//  (null,METHOD_RETURN,int)
//  (null,METHOD,public void send(int i))
//  (0,METHOD_PARAMETER_IN,this)
//  (1,METHOD_PARAMETER_IN,int i)
//  (2,BLOCK,null)
//  (1,RETURN,return;)
//  (null,MODIFIER,VIRTUAL)
//  (null,METHOD_RETURN,void)

}
