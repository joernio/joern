package io.joern.solidity2cpg.vulnerability

import io.joern.solidity2cpg.testfixtures.SolidityCodeToCpgFixture
import io.shiftleft.semanticcpg.language.{toNodeTypeStarters, _}

class ReentrancyTest extends SolidityCodeToCpgFixture {
  implicit val resolver: ICallResolver = NoResolve
  override val code: String =
    """
      |pragma solidity ^0.8.0;
      |
      |contract Foo {
      |
      |  address payable winner = payable(msg.sender);
      |  bool prizePaidOut;
      |  bool gameHasEnded;
      |
      |  function send_payment() public {
      |    if (gameHasEnded && !(prizePaidOut)) {
      |      winner.send(1000); // send a prize to the winner
      |      prizePaidOut = true;
      |    }
      |  }
      |
      |  function safe_send_payment() public {
      |    if (gameHasEnded && !(prizePaidOut)) {
      |      if (winner.send(1000))
      |        prizePaidOut = true;
      |      else revert();
      |    }
      |  }
      |
      |}
    """.stripMargin

  "Reentrancy vulnerability at method `send_payment`" in {
    {
      cpg.call
        .name("send")
        .receiver
        .whereNot(_.dominates.containsCallTo(".*revert.*"))

    }.method.name.next() shouldBe "send_payment"
  }

}
