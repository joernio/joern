package io.joern.solidity2cpg.vulnerability

import io.joern.solidity2cpg.testfixtures.SolidityCodeToCpgFixture
import io.shiftleft.semanticcpg.language.{toNodeTypeStarters, _}
class ModifyingStorageArrayByValueTests extends SolidityCodeToCpgFixture {
  implicit val resolver: ICallResolver = NoResolve
  override val code: String =
    """
      |pragma solidity ^0.8.0;
      |contract Memory {
      |    uint[1] public x; // storage
      |
      |    function f() public {
      |        f1(x); // update x
      |        f2(x); // do not update x
      |    }
      |
      |    function f1(uint[1] storage arr) internal { // by reference
      |        arr[0] = 1;
      |    }
      |
      |    function f2(uint[1] arr) internal { // by value
      |        arr[0] = 2;
      |    }
      |}
      |""".stripMargin
//TODO: Issue is that storage is different to other coding methods because there is both pass by value and pass by reference in solidity "storage "and "memory"
  "Should have the correctly use of storage and memory" in {
    {
      def findEditByValue = cpg.method.parameter
        .whereNot(_.typeFullName("storage"))
        .where(_.typeFullName(".*\\[\\]"))
      findEditByValue
    }.l.foreach(x => x.method.name shouldBe "f2")
  }
}
