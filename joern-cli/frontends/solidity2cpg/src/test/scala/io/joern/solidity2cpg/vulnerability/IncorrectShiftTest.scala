package io.joern.solidity2cpg.vulnerability

import io.joern.dataflowengineoss.language.toExtendedCfgNode
import io.joern.solidity2cpg.testfixtures.{SolidityCodeToCpgFixture, SolidityDataflowFixture}
import io.shiftleft.codepropertygraph.generated.Operators
import io.shiftleft.semanticcpg.language.{toNodeTypeStarters, _}
class IncorrectShiftTest extends SolidityDataflowFixture {
  override val code: String = {
    """
      |contract C {
      |    function f() internal returns (uint a) {
      |        assembly {
      |            a := shr(a, 8)
      |        }
      |    }
      |}
      |""".stripMargin
  }
  it should "IncorrectShift" in {
    {
      def sink = cpg.method
        .code("function .*")
        .call
        .code(".* := shr.*")
        .argument
        .isIdentifier
        .name
        .head

      def source = cpg.method
        .code("function .*")
        .call
        .code(".* := shr.*")
        .argument
        .isCall
        .name(s"${Operators.arithmeticShiftRight}")
        .argument
        .where(_.isCall.name(sink))
      source.method.name.l
    }.foreach(x => x shouldBe "f")
  }
}
